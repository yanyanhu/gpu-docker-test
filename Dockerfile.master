#
# Dockerfile for building Mesos from sources
#
FROM ubuntu:14.04
MAINTAINER Yubo Li <liyubobj@cn.ibm.com>

ENV WORK_DIR /mesos
WORKDIR ${WORK_DIR}

# Mesos branch used
ARG MESOS_VERSION=gpu-v3-staging

LABEL com.nvidia.volumes.needed="nvidia_driver"
LABEL com.nvidia.cuda.version="7.5"

# Import nvidia repo
ENV NVIDIA_GPGKEY_SUM bd841d59a27a406e513db7d405550894188a4c1cd96bf8aa4f82f1b39e0b5c1c
ENV NVIDIA_GPGKEY_FPR 889bee522da690103c4b085ed88c3d385c37d3be

RUN apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/GPGKEY && \
    apt-key adv --export --no-emit-version -a $NVIDIA_GPGKEY_FPR | tail -n +2 > cudasign.pub && \
    echo "$NVIDIA_GPGKEY_SUM  cudasign.pub" | sha256sum -c --strict - && rm cudasign.pub && \
    echo "deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1404/x86_64 /" > /etc/apt/sources.list.d/cuda.list

# Install gpu-deployment-kit, which includes nvidia-ml used by mesos
RUN apt-get update && cd /tmp && apt-get download gpu-deployment-kit && \
    apt-get clean

RUN mkdir /tmp/gpu-deployment-kit && cd /tmp/gpu-deployment-kit && \
    dpkg -x /tmp/gpu-deployment-kit_*.deb . && \
    mkdir -p /usr/local/cuda/include && \
    mkdir -p /usr/local/cuda/lib64/stubs && \
    mv usr/include/* /usr/local/cuda/include && \
    mv usr/src/gdk/nvml/lib/* /usr/local/cuda/lib64/stubs && \
    rm -rf /tmp/gpu-deployment-kit*

RUN echo "/usr/local/cuda/lib" >> /etc/ld.so.conf.d/cuda.conf && \
    echo "/usr/local/cuda/lib64" >> /etc/ld.so.conf.d/cuda.conf && \
    echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf && \
    ldconfig

ENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64:${LD_LIBRARY_PATH}
ENV LIBRARY_PATH /usr/local/cuda/lib64/stubs:${LIBRARY_PATH}

# Install mesos build dependencies
RUN apt-get update && apt-get install -y curl openjdk-7-jdk autoconf libtool python-setuptools \
    libelf-dev build-essential python-dev python-boto python-pip libcurl4-nss-dev libevent-dev \
    libsasl2-dev maven libapr1-dev libsvn-dev zlib1g-dev libgflags-dev wget git && \
    apt-get clean

RUN git clone https://github.com/liyubobj/mesos.git && \
    cd mesos && git checkout ${MESOS_VERSION} && cd .. && \
    mv mesos/* ./ && rm -r mesos

# Build mesos
RUN mkdir build && \
    ./bootstrap && \
    cd build && ../configure --with-nvml=/usr/local/cuda/include --enable-libevent --enable-ssl && \
    make install -j4 && \
    ldconfig && \
    cd $WORK_DIR/build/3rdparty/protobuf-* && make install && \
    cd $WORK_DIR/build/3rdparty/glog-* && make install && \
    cd $WORK_DIR/build/3rdparty/picojson-* && make install && \
    cd $WORK_DIR/build/src/python/dist && \
    pip install mesos.interface-*.whl && \
    pip install mesos.scheduler-*.whl && \
    pip install mesos.executor-*.whl && \
    pip install mesos.native-*.whl && \
    pip install mesos.cli-*.whl && \
    pip install mesos-*.whl && \
    cp -r $WORK_DIR/src/messages /usr/local/include && \
    cp -r $WORK_DIR/build/src/messages /usr/local/include && \
    mkdir /usr/local/lib/java && \
    cp $WORK_DIR/build/src/java/target/mesos-*.jar /usr/local/lib/java && \
    cd $WORK_DIR && rm -rf *

ENV MESOS_NATIVE_LIBRARY /usr/local/lib/libmesos.so
ENV MESOS_NATIVE_JAVA_LIBRARY /usr/local/lib/libmesos.so

ENTRYPOINT ["mesos-master"]
